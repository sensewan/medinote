<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="bbs">

	<resultMap type="mybatis.vo.BbsVO" id="map1"> <!-- BbsVO를 하나씩 만들어서 여러개 일경우 list로 만들어서 호출한 DAO로 보냄 그 후 <collection> 수행 -->
		<!-- id column은 절대로 중복이 안되는 primary key일경우에 쓴다. (그리고 다른 곳에서 또 쓰고 싶을 경우에도)  -->
		<id column="idx" property="idx"/>  <!-- column은 전달되어 오는 값이고 property는 넘어온것을 BbsVO의 멤버 변수 b_idx에 저장하는것 -->
		<!-- result column=""은 중복상관 없이 무조건 저장하는 경우에만 쓰임 -->
		
		<!-- 그리고 BbsVO의 c_list에다가 저장해 놓을것임 -> select id="commList"를 호출하는데 idx값을 가지고가 호출함 그리고 그 결과값을 CommVO형태로 c_lst에 넣음 -->
		<collection property="c_list" select="commList" column="idx" ofType="mybatis.vo.CommVO"></collection>
	</resultMap>


	<!-- 특정 원글의 기본키를 조건으로 하여 -> 해당 댓글들을 조회하는 기능 (cf.order by IDX를 해야 순차적으로 출력됨) -->
	<select id="commList" parameterType="String" resultType="mybatis.vo.CommVO">
		<!-- select * from COMMENT_TB
		where P_NO = #{idx} and DEL_FL = 0 order by IDX -->
		select * from (select * from COMMENT_TB where P_NO = #{idx} and DEL_FL = 0 order by IDX) LEFT JOIN USER_TB b on writer = b.U_ID
	</select>


	<!-- 사용자가 원글의 목록을 호출할 때 사용되는 목록 기능 -->
	<select id="list" parameterType="java.util.Map" resultMap="map1">  <!-- 결과를 -> map1인 resultMap에다가 보냈다가 갖고옴 -->
		select * from (
			select rownum r_num, a.* from (
				select * from BBS_TB where DEL_FL = 0 order by IDX desc) a)
					LEFT JOIN USER_TB b on writer = b.U_ID
				where r_num between #{begin} and #{end}
	</select>
	
	
	<!-- 페이징 기법에 사용될 전체페이지 수를 구하기 위해 현재 전체게시물의 수를 반환해야함 (즉 총 저장된 게시물 개수 나옴) -->
	<select id="totalCount" resultType="int" >
		select count(*) from BBS_TB where DEL_FL = 0
	</select>
	
	
	
		<!-- 원글 vo로 이용해서 저장 하기 -->
	<insert id="add" parameterType="mybatis.vo.BbsVO">
		insert into BBS_TB(IDX, TITLE, CONTENT, SRCH_TAG, WRITER, DEL_FL, IP, CREATE_DT, UPDATE_DT, HIT)
		values(B_SQ.nextval, #{title}, #{content}, #{srch_tag}, #{writer}, 0, #{ip}, SYSDATE, SYSDATE, 0)
	</insert>
	
	<!-- 보기 기능 (resultMap으로 하지 않으면 댓글을 받아오지 못함) -->
	<select id="getBbs" resultMap="map1" parameterType="String">
		select * from BBS_TB where IDX = #{idx}
	</select>
	
	
	<!-- 원글 수정1 -->
	<update id="edit" parameterType="mybatis.vo.BbsVO">
		update BBS_TB set TITLE=#{title}, CONTENT=#{content} ,SRCH_TAG=#{srch_tag}, UPDATE_DT=SYSDATE where IDX = #{idx}
	</update>
	
	
	
	<!-- 원글 DEL_FL 변경으로 삭제된것처럼 하기 -->
	<update id="del" parameterType="String">
		update BBS_TB set DEL_FL = 1 where IDX = #{idx}
	</update>
	
	
	<!-- 조회수 증가하기 -->
	<update id="update_hit" parameterType="String">
		update BBS_TB set HIT = HIT + 1 where IDX = #{idx}
	</update>


	<!-- 검색기능 -->
	
	<!-- 검색을 위한 select (동적쿼리 사용) -->
	<select id = "search" resultType="mybatis.vo.BbsVO" parameterType="java.util.Map">
		select * from BBS_TB b, USER_TB u where b.WRITER = u.U_ID
		<if test= "searchType != null and searchValue != null">
			<trim prefix="and" prefixOverrides="">
				<choose>
					<when test="searchType==1">
						TITLE like '%'||#{searchValue}||'%'
					</when>
					<when test="searchType==2">
						CONTENT like '%'||#{searchValue}||'%'
					</when>
				</choose>
			</trim>
		</if>
	</select>
	
	
	<!-- 댓글 등록 -->
	<insert id="addComm" parameterType="mybatis.vo.CommVO">
		insert into COMMENT_TB(IDX, P_NO, WRITER, CONTENT, DEL_FL, IP, CREATE_DT, UPDATE_DT) 
		values (C_SQ.nextval, #{p_no}, #{writer}, #{content}, 0, #{ip}, SYSDATE, SYSDATE)
	</insert>
	
	<!-- 댓글 삭제 status 1로 변경 -->
	<update id="delComm" parameterType="String">
		update COMMENT_TB set DEL_FL = 1 where IDX = #{idx}
	</update>
	
	
	<!-- 댓글 수정 -->
	<update id="editComm" parameterType="mybatis.vo.CommVO">
		update COMMENT_TB set CONTENT=#{content}, UPDATE_DT=sysdate where IDX = #{idx}
	</update>
	
	
	
	<!-- 글쓰기에서 사용자 증상태그 가져오기 -->
	<select id="symTag" parameterType="String" resultType="mybatis.vo.SymVO">
		select s_cd, s_nm from SYMPTOM_TB where S_CD in (select distinct regexp_substr(a.txt, '[^.]+', 1, LEVEL) txt
		from (select SRCH_TAG txt from USER_SRCH_TAG where U_ID=#{u_id}) a
		<![CDATA[connect by LEVEL <= length(regexp_replace(A.TXT, '[^.]+',''))+1)]]>
	</select>
	
</mapper>


